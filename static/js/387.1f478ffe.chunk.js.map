{"version":3,"file":"static/js/387.1f478ffe.chunk.js","mappings":"8RAEaA,EAAOC,EAAAA,EAAAA,GAAH,4JASJC,EAAQD,EAAAA,EAAAA,EAAH,sIAQLE,EAAOF,EAAAA,EAAAA,GAAH,6CAIJG,EAASH,EAAAA,EAAAA,EAAH,yIAQNI,EAAQJ,EAAAA,EAAAA,EAAH,gFAMLK,EAAeL,EAAAA,EAAAA,EAAH,yGAOZM,EAASN,EAAAA,EAAAA,IAAH,4F,mBCuBnB,EArDgB,WACd,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA4BC,GAA5B,8EACEJ,GAAa,GADf,mBAGuBK,EAAAA,EAAAA,IAAWD,GAHlC,OAGUE,EAHV,OAIIV,EAAWU,GAJf,gDAMIR,EAAS,KAAMS,SANnB,yBAQIP,GAAa,GARjB,6EADc,uBAAC,SAAD,2BAadQ,CAAaP,EACd,GAAE,CAACA,KAGF,gCACGN,EAAQc,OAAS,IAAMV,IACtB,iCACE,SAACX,EAAD,uBACA,SAACF,EAAD,UACGS,EAAQe,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACvB,EAAD,YACE,SAACC,EAAD,UAASqB,KACT,uBAAIC,MAFKR,EADA,SAUlBL,IACC,SAACN,EAAD,WACE,SAAC,KAAD,CAAeoB,YAAY,OAAOC,YAAY,IAAIC,MAAM,UAI1DpB,EAAQc,SAAWV,IAAcF,IACjC,SAACL,EAAD,gCAGDK,IAAS,SAACN,EAAD,UAAQM,MAGvB,C,mMC/DKmB,EAAW,gCACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFzC,cACGG,EADH,yBAIIA,EAASd,KAAKe,SAJlB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACoBJ,EAAAA,EAAAA,IAAA,UAChBH,EADgB,gCACgBC,EADhB,kBACiCM,IAFrD,cACGH,EADH,yBAIIA,EAASd,KAAKe,SAJlB,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BvB,GAA5B,uFACoBkB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iBACCf,EADD,oBACoBgB,IAFxC,cACGG,EADH,yBAIIA,EAASd,MAJb,kEAOA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAAuBrB,GAAvB,uFACoBe,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iBACCZ,EADD,4BACuBa,IAF3C,cACGG,EADH,yBAIIA,EAASd,KAAKoB,MAJlB,kEAOA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BD,GAA1B,uFACoBe,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iBACCZ,EADD,4BACuBa,IAF3C,cACGG,EADH,yBAIIA,EAASd,KAAKe,SAJlB,kE","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 32px;\n  margin-top: 16px;\n`;\n\nexport const Title = styled.p`\n  text-align: center;\n  margin-top: 16px;\n  font-family: inherit;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const Item = styled.li`\n  max-width: 900px;\n`;\n\nexport const Author = styled.p`\n  font-family: inherit;\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 16px;\n  font-style: italic;\n`;\n\nexport const Error = styled.p`\n  color: red;\n  font-size: 20px;\n  margin-top: 16px;\n`;\n\nexport const Notification = styled.p`\n  color: black;\n  font-size: 20px;\n  margin-top: 16px;\n  text-align: center;\n`;\n\nexport const Layout = styled.div`\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n","import { getReviews } from 'services/api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  List,\n  Title,\n  Item,\n  Author,\n  Error,\n  Notification,\n  Layout,\n} from './Reviews.styled';\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchReviews(id) {\n      setIsLoading(true);\n      try {\n        const data = await getReviews(id);\n        setReviews(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 && !isLoading && (\n        <>\n          <Title>REVIEWS</Title>\n          <List>\n            {reviews.map(({ id, author, content }) => (\n              <Item key={id}>\n                <Author>{author}</Author>\n                <p>{content}</p>\n              </Item>\n            ))}\n          </List>\n        </>\n      )}\n\n      {isLoading && (\n        <Layout>\n          <RotatingLines strokeColor=\"grey\" strokeWidth=\"3\" width=\"32\" />\n        </Layout>\n      )}\n\n      {!reviews.length && !isLoading && !error && (\n        <Notification>There is no revie</Notification>\n      )}\n\n      {error && <Error>{error}</Error>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '917b4db2abe704f469567a6fce387097';\n\nexport async function fetchTrendingMovies() {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/week?api_key=${API_KEY}`\n    );\n    return response.data.results;\n}\n\nexport async function getMoviesBySearch(query) {\n    const response = await axios.get(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    )\n    return response.data.results;\n}\n\nexport async function getMovieById(movieId) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    )\n    return response.data;\n}\n\nexport async function getCast(id) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    )\n    return response.data.cast;\n}\n\nexport async function getReviews(id) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    )\n    return response.data.results;\n}"],"names":["List","styled","Title","Item","Author","Error","Notification","Layout","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","id","getReviews","data","message","fetchReviews","length","map","author","content","strokeColor","strokeWidth","width","BASE_URL","API_KEY","fetchTrendingMovies","axios","response","results","getMoviesBySearch","query","getMovieById","getCast","cast"],"sourceRoot":""}