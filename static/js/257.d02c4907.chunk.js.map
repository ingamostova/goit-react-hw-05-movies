{"version":3,"file":"static/js/257.d02c4907.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const Name = styled.h2`\n  font-family: inherit;\n  font-size: 40px;\n  margin-bottom: 16px;\n`;\n\nexport const Image = styled.img`\n  width: 340px;\n  border-radius: 5px;\n  height: 510px;\n  object-fit: cover;\n`;\n\nexport const Genres = styled.p`\n  font-family: inherit;\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 16px;\n`;\n\nexport const Info = styled.div`\n  width: 500px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 16px;\n  margin-top: 16px;\n`;\n\nexport const Link = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n\n  &.active {\n    color: white;\n    background-color: #0088ff;\n  }\n`;\n\nexport const BackBtn = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  display: inline-flex;\n  gap: 4px;\n  align-items: center;\n  margin-bottom: 16px;\n  transition: all 300ms ease-out;\n  :hover {\n    color: #fff;\n    background-color: #0088ff;\n  }\n`;\n\nexport const Error = styled.p`\n  color: red;\n  font-size: 20px;\n  margin-top: 16px;\n`;\n\nexport const Layout = styled.div`\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n","import { getMovieById } from 'services/api';\nimport { useEffect, useState } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport {\n  Wrapper,\n  Name,\n  Genres,\n  Info,\n  Link,\n  List,\n  Image,\n  BackBtn,\n  Error,\n  Layout,\n} from './MovieDetails.styled';\nimport { BsArrowLeft } from 'react-icons/bs';\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    async function fetchMovie(id) {\n      setIsLoading(true);\n      try {\n        const data = await getMovieById(id);\n        setMovie(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchMovie(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {!isLoading && (\n        <div>\n          <BackBtn to={backLink}>\n            <BsArrowLeft />\n            Go Back\n          </BackBtn>\n          <Wrapper>\n            <Image\n              src={\n                movie.poster_path === null\n                  ? `https://media.istockphoto.com/id/1216251206/vector/no-image-available-icon.jpg?s=612x612&w=0&k=20&c=6C0wzKp_NZgexxoECc8HD4jRpXATfcu__peSYecAwt0=`\n                  : `https://image.tmdb.org/t/p/w342/${movie.poster_path}`\n              }\n              alt={movie.title}\n            />\n            <Info>\n              <Name>{movie.title}</Name>\n              <Genres>\n                Genres:{' '}\n                {movie.genres?.length > 0\n                  ? movie.genres.map(genre => genre.name).join(', ')\n                  : '-'}\n              </Genres>\n              <p>{movie.overview}</p>\n              <List>\n                <li>\n                  <Link to=\"cast\" state={{ from: backLink }}>\n                    Cast\n                  </Link>\n                </li>\n                <li>\n                  <Link to=\"reviews\" state={{ from: backLink }}>\n                    Reviews\n                  </Link>\n                </li>\n              </List>\n            </Info>\n          </Wrapper>\n\n          <Suspense\n            fallback={\n              <Layout>\n                <RotatingLines strokeColor=\"grey\" strokeWidth=\"3\" width=\"32\" />\n              </Layout>\n            }\n          >\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n\n      {isLoading && (\n        <Layout>\n          <RotatingLines strokeColor=\"grey\" strokeWidth=\"3\" width=\"77\" />\n        </Layout>\n      )}\n\n      {error && <Error>{error}</Error>}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '917b4db2abe704f469567a6fce387097';\n\nexport async function fetchTrendingMovies() {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/week?api_key=${API_KEY}`\n    );\n    return response.data.results;\n}\n\nexport async function getMoviesBySearch(query) {\n    const response = await axios.get(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    )\n    return response.data.results;\n}\n\nexport async function getMovieById(movieId) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    )\n    return response.data;\n}\n\nexport async function getCast(id) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    )\n    return response.data.cast;\n}\n\nexport async function getReviews(id) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    )\n    return response.data.results;\n}"],"names":["Wrapper","styled","Name","Image","Genres","Info","List","Link","NavLink","BackBtn","Error","Layout","movieId","useParams","useState","movie","setMovie","error","setError","isLoading","setIsLoading","backLink","useLocation","state","from","useEffect","id","getMovieById","data","fetchMovie","to","src","poster_path","alt","title","genres","length","map","genre","name","join","overview","Suspense","fallback","strokeColor","strokeWidth","width","BASE_URL","API_KEY","fetchTrendingMovies","axios","response","results","getMoviesBySearch","query","getCast","cast","getReviews"],"sourceRoot":""}