{"version":3,"file":"static/js/736.cce9358e.chunk.js","mappings":"gSAEaA,EAAOC,EAAAA,EAAAA,GAAH,uJASJC,EAAQD,EAAAA,EAAAA,IAAH,4GAOLE,EAAcF,EAAAA,EAAAA,EAAH,sIAQXG,EAAOH,EAAAA,EAAAA,GAAH,6CAIJI,EAAYJ,EAAAA,EAAAA,EAAH,2EAMTK,EAAeL,EAAAA,EAAAA,EAAH,yGAOZM,EAAQN,EAAAA,EAAAA,EAAH,gFAMLO,EAASP,EAAAA,EAAAA,IAAH,4F,uCCmCnB,EAnEa,WACX,OAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCAEd,WAAyBC,GAAzB,iGAEuBC,EAAAA,EAAAA,IAAQD,GAF/B,OAEUE,EAFV,OAGIV,EAAQU,GAHZ,gDAKIR,EAAS,KAAMS,SALnB,yBAOIP,GAAa,GAPjB,6EAFc,sBACdA,GAAa,GADC,oCAadQ,CAAUP,EACX,GAAE,CAACA,KAGF,gCACGN,EAAKc,OAAS,IAAMV,IACnB,iCACE,SAACX,EAAD,sBACA,SAACH,EAAD,UACGU,EAAKe,KAAI,SAAAC,GAAK,OACb,UAACtB,EAAD,YACE,SAACF,EAAD,CACEyB,IACyB,OAAvBD,EAAME,aAAN,mHAEuCF,EAAME,cAE/CC,IAAI,MAEN,UAACxB,EAAD,YACE,SAAC,MAAD,IACCqB,EAAMI,SAET,UAACzB,EAAD,YACE,SAAC,MAAD,IACCqB,EAAMK,eAfAL,EAAMP,GADJ,SAwBpBL,IACC,SAACN,EAAD,WACE,SAAC,KAAD,CAAewB,YAAY,OAAOC,YAAY,IAAIC,MAAM,UAI1DxB,EAAKc,SAAWV,IAAcF,IAC9B,SAACN,EAAD,0CAGDM,IAAS,SAACL,EAAD,UAAQK,MAGvB,C,mMChFKuB,EAAW,gCACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFzC,cACGG,EADH,yBAIIA,EAASlB,KAAKmB,SAJlB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACoBJ,EAAAA,EAAAA,IAAA,UAChBH,EADgB,gCACgBC,EADhB,kBACiCM,IAFrD,cACGH,EADH,yBAIIA,EAASlB,KAAKmB,SAJlB,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4B3B,GAA5B,uFACoBsB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iBACCnB,EADD,oBACoBoB,IAFxC,cACGG,EADH,yBAIIA,EAASlB,MAJb,kEAOA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAAuBD,GAAvB,uFACoBmB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iBACChB,EADD,4BACuBiB,IAF3C,cACGG,EADH,yBAIIA,EAASlB,KAAKX,MAJlB,kEAOA,SAAekC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BzB,GAA1B,uFACoBmB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,iBACChB,EADD,4BACuBiB,IAF3C,cACGG,EADH,yBAIIA,EAASlB,KAAKmB,SAJlB,kE","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  justify-content: center;\n  align-items: baseline;\n  margin-top: 16px;\n`;\n\nexport const Image = styled.img`\n  width: 185px;\n  border-radius: 5px;\n  max-height: 277px;\n  object-fit: cover;\n`;\n\nexport const ActorsTitle = styled.p`\n  text-align: center;\n  margin-top: 16px;\n  font-family: inherit;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const Item = styled.li`\n  max-width: 185px;\n`;\n\nexport const ActorInfo = styled.p`\n  margin-top: 8px;\n  display: flex;\n  gap: 5px;\n`;\n\nexport const Notification = styled.p`\n  color: black;\n  font-size: 20px;\n  margin-top: 16px;\n  text-align: center;\n`;\n\nexport const Error = styled.p`\n  color: red;\n  font-size: 20px;\n  margin-top: 16px;\n`;\n\nexport const Layout = styled.div`\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n","import { getCast } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  List,\n  Image,\n  ActorsTitle,\n  Item,\n  ActorInfo,\n  Notification,\n  Error,\n  Layout,\n} from './Cast.styled';\nimport { BiCameraMovie } from 'react-icons/bi';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchCast(id) {\n      try {\n        const data = await getCast(id);\n        setCast(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length > 0 && !isLoading && (\n        <>\n          <ActorsTitle>ACTORS</ActorsTitle>\n          <List>\n            {cast.map(actor => (\n              <Item key={actor.id}>\n                <Image\n                  src={\n                    actor.profile_path === null\n                      ? `https://cdn.pixabay.com/photo/2016/04/01/10/11/avatar-1299805__340.png`\n                      : `https://image.tmdb.org/t/p/w185/${actor.profile_path}`\n                  }\n                  alt=\"\"\n                />\n                <ActorInfo>\n                  <BsPersonCircle />\n                  {actor.name}\n                </ActorInfo>\n                <ActorInfo>\n                  <BiCameraMovie />\n                  {actor.character}\n                </ActorInfo>\n              </Item>\n            ))}\n          </List>\n        </>\n      )}\n\n      {isLoading && (\n        <Layout>\n          <RotatingLines strokeColor=\"grey\" strokeWidth=\"3\" width=\"32\" />\n        </Layout>\n      )}\n\n      {!cast.length && !isLoading && !error && (\n        <Notification>No information about actors</Notification>\n      )}\n\n      {error && <Error>{error}</Error>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '917b4db2abe704f469567a6fce387097';\n\nexport async function fetchTrendingMovies() {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/week?api_key=${API_KEY}`\n    );\n    return response.data.results;\n}\n\nexport async function getMoviesBySearch(query) {\n    const response = await axios.get(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    )\n    return response.data.results;\n}\n\nexport async function getMovieById(movieId) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    )\n    return response.data;\n}\n\nexport async function getCast(id) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    )\n    return response.data.cast;\n}\n\nexport async function getReviews(id) {\n    const response = await axios.get(\n        `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    )\n    return response.data.results;\n}"],"names":["List","styled","Image","ActorsTitle","Item","ActorInfo","Notification","Error","Layout","useState","cast","setCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","id","getCast","data","message","fetchCast","length","map","actor","src","profile_path","alt","name","character","strokeColor","strokeWidth","width","BASE_URL","API_KEY","fetchTrendingMovies","axios","response","results","getMoviesBySearch","query","getMovieById","getReviews"],"sourceRoot":""}